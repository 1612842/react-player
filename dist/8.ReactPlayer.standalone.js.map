{"version":3,"sources":["webpack://renderReactPlayer/./src/players/Twitch.js"],"names":["MATCH_VIDEO_URL","MATCH_CHANNEL_URL","Twitch","callPlayer","randomString","Component","this","props","didMount","url","isReady","playsinline","onError","config","controls","isChannel","test","id","match","player","setChannel","setVideo","getSDK","then","Player","playerID","video","channel","height","width","autoplay","playing","muted","twitch","options","READY","PLAYING","PAUSE","ENDED","ONLINE","OFFLINE","addEventListener","onReady","onPlay","onPause","onEnded","onLoaded","seconds","fraction","style"],"mappings":"0vCAIA,IAEMA,EAAkB,iDAClBC,EAAoB,gDAGLC,E,6VAKNC,K,kBAPU,iBAQOC,e,cA+DvB,WACL,EAAKD,WAAW,YAAY,K,gBAGrB,WACP,EAAKA,WAAW,YAAY,K,8OA1EIE,gB,4FAShCC,KAAKC,MAAMC,UAAYF,KAAKC,MAAMC,SAASF,Q,2BAGvCG,EAAKC,GAAS,aACiCJ,KAAKC,MAAhDI,EADU,EACVA,YAAaC,EADH,EACGA,QAASC,EADZ,EACYA,OAAQC,EADpB,EACoBA,SAChCC,EAAYd,EAAkBe,KAAKP,GACnCQ,EAAKF,EAAYN,EAAIS,MAAMjB,GAAmB,GAAKQ,EAAIS,MAAMlB,GAAiB,GAChFU,EACEK,EACFT,KAAKa,OAAOC,WAAWH,GAEvBX,KAAKa,OAAOE,SAAS,IAAMJ,GAI/BK,YA9BY,0CACG,UA6BaC,KAAK,SAAArB,GAC/B,EAAKiB,OAAS,IAAIjB,EAAOsB,OAAO,EAAKC,S,2UAAvB,EACZC,MAAOX,EAAY,GAAKE,EACxBU,QAASZ,EAAYE,EAAK,GAC1BW,OAAQ,OACRC,MAAO,OACPlB,YAAaA,EACbmB,SAAU,EAAKvB,MAAMwB,QACrBC,MAAO,EAAKzB,MAAMyB,MAElBlB,WAAUC,GAAmBD,GAC1BD,EAAOoB,OAAOC,UAXsB,MAaiBhC,EAAOsB,OAAzDW,EAbiC,EAajCA,MAAOC,EAb0B,EAa1BA,QAASC,EAbiB,EAajBA,MAAOC,EAbU,EAaVA,MAAOC,EAbG,EAaHA,OAAQC,EAbL,EAaKA,QAC9C,EAAKrB,OAAOsB,iBAAiBN,EAAO,EAAK5B,MAAMmC,SAC/C,EAAKvB,OAAOsB,iBAAiBL,EAAS,EAAK7B,MAAMoC,QACjD,EAAKxB,OAAOsB,iBAAiBJ,EAAO,EAAK9B,MAAMqC,SAC/C,EAAKzB,OAAOsB,iBAAiBH,EAAO,EAAK/B,MAAMsC,SAG/C,EAAK1B,OAAOsB,iBAAiBF,EAAQ,EAAKhC,MAAMuC,UAChD,EAAK3B,OAAOsB,iBAAiBD,EAAS,EAAKjC,MAAMuC,WAChDlC,K,6BAIHN,KAAKH,WAAW,U,8BAIhBG,KAAKH,WAAW,W,6BAIhBG,KAAKH,WAAW,W,6BAGV4C,GACNzC,KAAKH,WAAW,OAAQ4C,K,gCAGfC,GACT1C,KAAKH,WAAW,YAAa6C,K,oCAY7B,OAAO1C,KAAKH,WAAW,iB,uCAIvB,OAAOG,KAAKH,WAAW,oB,yCAIvB,OAAO,O,+BAQP,OACE,yBAAK8C,MALO,CACZpB,MAAO,OACPD,OAAQ,QAGWX,GAAIX,KAAKmB,e,OA/FbvB,E,cACE,U,EADFA,E,UAEF,SAAAO,GAAG,OAAIT,EAAgBgB,KAAKP,IAAQR,EAAkBe,KAAKP,K,EAFzDP,E,eAGE","file":"8.ReactPlayer.standalone.js","sourcesContent":["import React, { Component } from 'react'\n\nimport { callPlayer, getSDK, randomString } from '../utils'\n\nconst SDK_URL = 'https://player.twitch.tv/js/embed/v1.js'\nconst SDK_GLOBAL = 'Twitch'\nconst MATCH_VIDEO_URL = /(?:www\\.|go\\.)?twitch\\.tv\\/videos\\/(\\d+)($|\\?)/\nconst MATCH_CHANNEL_URL = /(?:www\\.|go\\.)?twitch\\.tv\\/([a-z0-9_]+)($|\\?)/\nconst PLAYER_ID_PREFIX = 'twitch-player-'\n\nexport default class Twitch extends Component {\n  static displayName = 'Twitch'\n  static canPlay = url => MATCH_VIDEO_URL.test(url) || MATCH_CHANNEL_URL.test(url)\n  static loopOnEnded = true\n\n  callPlayer = callPlayer\n  playerID = PLAYER_ID_PREFIX + randomString()\n\n  componentDidMount () {\n    this.props.didMount && this.props.didMount(this)\n  }\n\n  load (url, isReady) {\n    const { playsinline, onError, config, controls } = this.props\n    const isChannel = MATCH_CHANNEL_URL.test(url)\n    const id = isChannel ? url.match(MATCH_CHANNEL_URL)[1] : url.match(MATCH_VIDEO_URL)[1]\n    if (isReady) {\n      if (isChannel) {\n        this.player.setChannel(id)\n      } else {\n        this.player.setVideo('v' + id)\n      }\n      return\n    }\n    getSDK(SDK_URL, SDK_GLOBAL).then(Twitch => {\n      this.player = new Twitch.Player(this.playerID, {\n        video: isChannel ? '' : id,\n        channel: isChannel ? id : '',\n        height: '100%',\n        width: '100%',\n        playsinline: playsinline,\n        autoplay: this.props.playing,\n        muted: this.props.muted,\n        // https://github.com/CookPete/react-player/issues/733#issuecomment-549085859\n        controls: isChannel ? true : controls,\n        ...config.twitch.options\n      })\n      const { READY, PLAYING, PAUSE, ENDED, ONLINE, OFFLINE } = Twitch.Player\n      this.player.addEventListener(READY, this.props.onReady)\n      this.player.addEventListener(PLAYING, this.props.onPlay)\n      this.player.addEventListener(PAUSE, this.props.onPause)\n      this.player.addEventListener(ENDED, this.props.onEnded)\n\n      // Prevent weird isLoading behaviour when streams are offline\n      this.player.addEventListener(ONLINE, this.props.onLoaded)\n      this.player.addEventListener(OFFLINE, this.props.onLoaded)\n    }, onError)\n  }\n\n  play () {\n    this.callPlayer('play')\n  }\n\n  pause () {\n    this.callPlayer('pause')\n  }\n\n  stop () {\n    this.callPlayer('pause')\n  }\n\n  seekTo (seconds) {\n    this.callPlayer('seek', seconds)\n  }\n\n  setVolume (fraction) {\n    this.callPlayer('setVolume', fraction)\n  }\n\n  mute = () => {\n    this.callPlayer('setMuted', true)\n  }\n\n  unmute = () => {\n    this.callPlayer('setMuted', false)\n  }\n\n  getDuration () {\n    return this.callPlayer('getDuration')\n  }\n\n  getCurrentTime () {\n    return this.callPlayer('getCurrentTime')\n  }\n\n  getSecondsLoaded () {\n    return null\n  }\n\n  render () {\n    const style = {\n      width: '100%',\n      height: '100%'\n    }\n    return (\n      <div style={style} id={this.playerID} />\n    )\n  }\n}\n"],"sourceRoot":""}
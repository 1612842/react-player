{"version":3,"sources":["webpack://renderReactPlayer/./src/Preview.js"],"names":["ICON_SIZE","Preview","image","Component","this","mounted","fetchImage","props","prevProps","url","light","setState","window","fetch","then","response","json","data","thumbnail_url","replace","onClick","playIcon","state","flexCenter","display","alignItems","justifyContent","styles","preview","width","height","backgroundImage","undefined","backgroundSize","backgroundPosition","cursor","shadow","background","borderRadius","borderStyle","borderWidth","borderColor","marginLeft","defaultPlayIcon","style","className"],"mappings":"gkDAEA,IAAMA,EAAY,OAEGC,E,2VACT,G,eACF,CACNC,MAAO,O,8OAH0BC,gB,4FAOjCC,KAAKC,SAAU,EACfD,KAAKE,WAAWF,KAAKG,S,yCAGHC,GAAW,MACNJ,KAAKG,MAApBE,EADqB,EACrBA,IAAKC,EADgB,EAChBA,MACTF,EAAUC,MAAQA,GAAOD,EAAUE,QAAUA,GAC/CN,KAAKE,WAAWF,KAAKG,S,6CAKvBH,KAAKC,SAAU,I,oCAGW,WAAdI,EAAc,EAAdA,IAAKC,EAAS,EAATA,MACjB,GAAqB,iBAAVA,EAKX,OADAN,KAAKO,SAAS,CAAET,MAAO,OAChBU,OAAOC,MAAP,wCAA8CJ,IAClDK,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACJ,GAAIA,EAAKC,eAAiB,EAAKb,QAAS,CACtC,IAAMH,EAAQe,EAAKC,cAAcC,QAAQ,aAAc,cACvD,EAAKR,SAAS,CAAET,aATpBE,KAAKO,SAAS,CAAET,MAAOQ,M,+BAcjB,MACsBN,KAAKG,MAA3Ba,EADA,EACAA,QAASC,EADT,EACSA,SACTnB,EAAUE,KAAKkB,MAAfpB,MACFqB,EAAa,CACjBC,QAAS,OACTC,WAAY,SACZC,eAAgB,UAEZC,EAAS,CACbC,QAAS,EAAF,CACLC,MAAO,OACPC,OAAQ,OACRC,gBAAiB7B,EAAQ,OAAH,OAAUA,EAAV,UAAqB8B,EAC3CC,eAAgB,QAChBC,mBAAoB,SACpBC,OAAQ,WACLZ,GAELa,OAAQ,EAAF,CACJC,WAAY,2DACZC,aAActC,EACd6B,MAAO7B,EACP8B,OAAQ9B,GACLuB,GAELF,SAAU,CACRkB,YAAa,QACbC,YAAa,mBACbC,YAAa,4CACbC,WAAY,QAGVC,EACJ,yBAAKC,MAAOjB,EAAOS,OAAQS,UAAU,wBACnC,yBAAKD,MAAOjB,EAAON,SAAUwB,UAAU,6BAG3C,OACE,yBAAKD,MAAOjB,EAAOC,QAASiB,UAAU,wBAAwBzB,QAASA,GACpEC,GAAYsB,O","file":"2.ReactPlayer.standalone.js","sourcesContent":["import React, { Component } from 'react'\n\nconst ICON_SIZE = '64px'\n\nexport default class Preview extends Component {\n  mounted = false\n  state = {\n    image: null\n  }\n\n  componentDidMount () {\n    this.mounted = true\n    this.fetchImage(this.props)\n  }\n\n  componentDidUpdate (prevProps) {\n    const { url, light } = this.props\n    if (prevProps.url !== url || prevProps.light !== light) {\n      this.fetchImage(this.props)\n    }\n  }\n\n  componentWillUnmount () {\n    this.mounted = false\n  }\n\n  fetchImage ({ url, light }) {\n    if (typeof light === 'string') {\n      this.setState({ image: light })\n      return\n    }\n    this.setState({ image: null })\n    return window.fetch(`https://noembed.com/embed?url=${url}`)\n      .then(response => response.json())\n      .then(data => {\n        if (data.thumbnail_url && this.mounted) {\n          const image = data.thumbnail_url.replace('height=100', 'height=480')\n          this.setState({ image })\n        }\n      })\n  }\n\n  render () {\n    const { onClick, playIcon } = this.props\n    const { image } = this.state\n    const flexCenter = {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center'\n    }\n    const styles = {\n      preview: {\n        width: '100%',\n        height: '100%',\n        backgroundImage: image ? `url(${image})` : undefined,\n        backgroundSize: 'cover',\n        backgroundPosition: 'center',\n        cursor: 'pointer',\n        ...flexCenter\n      },\n      shadow: {\n        background: 'radial-gradient(rgb(0, 0, 0, 0.3), rgba(0, 0, 0, 0) 60%)',\n        borderRadius: ICON_SIZE,\n        width: ICON_SIZE,\n        height: ICON_SIZE,\n        ...flexCenter\n      },\n      playIcon: {\n        borderStyle: 'solid',\n        borderWidth: '16px 0 16px 26px',\n        borderColor: 'transparent transparent transparent white',\n        marginLeft: '7px'\n      }\n    }\n    const defaultPlayIcon = (\n      <div style={styles.shadow} className='react-player__shadow'>\n        <div style={styles.playIcon} className='react-player__play-icon' />\n      </div>\n    )\n    return (\n      <div style={styles.preview} className='react-player__preview' onClick={onClick}>\n        {playIcon || defaultPlayIcon}\n      </div>\n    )\n  }\n}\n"],"sourceRoot":""}
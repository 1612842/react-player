{"version":3,"sources":["webpack://ReactPlayer/./src/players/YouTube.js"],"names":["MATCH_URL","MATCH_PLAYLIST","parsePlaylist","url","test","listType","list","match","YouTube","callPlayer","data","props","onPlay","onPause","onBuffer","onBufferEnd","onEnded","onReady","loop","window","PlayerState","PLAYING","PAUSED","BUFFERING","ENDED","CUED","isPlaylist","play","container","Component","this","didMount","isReady","playing","muted","playsinline","controls","config","onError","youtube","playerVars","embedOptions","id","player","loadPlaylist","cueVideoById","videoId","startSeconds","parseStartTime","start","endSeconds","parseEndTime","end","getSDK","YT","loaded","then","Player","width","height","autoplay","mute","origin","location","events","setLoop","onStateChange","event","document","body","contains","amount","pause","fraction","rate","getDuration","style","display","ref"],"mappings":"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","file":"11.ReactPlayer.js","sourcesContent":["import React, { Component } from 'react'\n\nimport { callPlayer, getSDK, parseStartTime, parseEndTime } from '../utils'\n\nconst SDK_URL = 'https://www.youtube.com/iframe_api'\nconst SDK_GLOBAL = 'YT'\nconst SDK_GLOBAL_READY = 'onYouTubeIframeAPIReady'\nconst MATCH_URL = /(?:youtu\\.be\\/|youtube\\.com\\/(?:embed\\/|v\\/|watch\\?v=|watch\\?.+&v=))((\\w|-){11})|youtube\\.com\\/playlist\\?list=/\nconst MATCH_PLAYLIST = /list=([a-zA-Z0-9_-]+)/\n\nfunction parsePlaylist (url) {\n  if (MATCH_PLAYLIST.test(url)) {\n    const [, playlistId] = url.match(MATCH_PLAYLIST)\n    return {\n      listType: 'playlist',\n      list: playlistId\n    }\n  }\n  return {}\n}\n\nexport default class YouTube extends Component {\n  static displayName = 'YouTube'\n  static canPlay = url => MATCH_URL.test(url)\n\n  callPlayer = callPlayer\n\n  componentDidMount () {\n    this.props.didMount && this.props.didMount(this)\n  }\n\n  load (url, isReady) {\n    const { playing, muted, playsinline, controls, loop, config, onError } = this.props\n    const { playerVars, embedOptions } = config.youtube\n    const id = url && url.match(MATCH_URL)[1]\n    if (isReady) {\n      if (MATCH_PLAYLIST.test(url)) {\n        this.player.loadPlaylist(parsePlaylist(url))\n        return\n      }\n      this.player.cueVideoById({\n        videoId: id,\n        startSeconds: parseStartTime(url) || playerVars.start,\n        endSeconds: parseEndTime(url) || playerVars.end\n      })\n      return\n    }\n    getSDK(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY, YT => YT.loaded).then(YT => {\n      if (!this.container) return\n      this.player = new YT.Player(this.container, {\n        width: '100%',\n        height: '100%',\n        videoId: id,\n        playerVars: {\n          autoplay: playing ? 1 : 0,\n          mute: muted ? 1 : 0,\n          controls: controls ? 1 : 0,\n          start: parseStartTime(url),\n          end: parseEndTime(url),\n          origin: window.location.origin,\n          playsinline: playsinline,\n          ...parsePlaylist(url),\n          ...playerVars\n        },\n        events: {\n          onReady: () => {\n            if (loop) {\n              this.player.setLoop(true) // Enable playlist looping\n            }\n            this.props.onReady()\n          },\n          onStateChange: this.onStateChange,\n          onError: event => onError(event.data)\n        },\n        ...embedOptions\n      })\n    }, onError)\n  }\n\n  onStateChange = ({ data }) => {\n    const { onPlay, onPause, onBuffer, onBufferEnd, onEnded, onReady, loop } = this.props\n    const { PLAYING, PAUSED, BUFFERING, ENDED, CUED } = window[SDK_GLOBAL].PlayerState\n    if (data === PLAYING) {\n      onPlay()\n      onBufferEnd()\n    }\n    if (data === PAUSED) onPause()\n    if (data === BUFFERING) onBuffer()\n    if (data === ENDED) {\n      const isPlaylist = !!this.callPlayer('getPlaylist')\n      if (loop && !isPlaylist) {\n        this.play() // Only loop manually if not playing a playlist\n      }\n      onEnded()\n    }\n    if (data === CUED) onReady()\n  }\n\n  play () {\n    this.callPlayer('playVideo')\n  }\n\n  pause () {\n    this.callPlayer('pauseVideo')\n  }\n\n  stop () {\n    if (!document.body.contains(this.callPlayer('getIframe'))) return\n    this.callPlayer('stopVideo')\n  }\n\n  seekTo (amount) {\n    this.callPlayer('seekTo', amount)\n    if (!this.props.playing) {\n      this.pause()\n    }\n  }\n\n  setVolume (fraction) {\n    this.callPlayer('setVolume', fraction * 100)\n  }\n\n  mute = () => {\n    this.callPlayer('mute')\n  }\n\n  unmute = () => {\n    this.callPlayer('unMute')\n  }\n\n  setPlaybackRate (rate) {\n    this.callPlayer('setPlaybackRate', rate)\n  }\n\n  setLoop (loop) {\n    this.callPlayer('setLoop', loop)\n  }\n\n  getDuration () {\n    return this.callPlayer('getDuration')\n  }\n\n  getCurrentTime () {\n    return this.callPlayer('getCurrentTime')\n  }\n\n  getSecondsLoaded () {\n    return this.callPlayer('getVideoLoadedFraction') * this.getDuration()\n  }\n\n  ref = container => {\n    this.container = container\n  }\n\n  render () {\n    const { display } = this.props\n    const style = {\n      width: '100%',\n      height: '100%',\n      display\n    }\n    return (\n      <div style={style}>\n        <div ref={this.ref} />\n      </div>\n    )\n  }\n}\n"],"sourceRoot":""}
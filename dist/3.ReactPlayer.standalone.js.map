{"version":3,"sources":["webpack://renderReactPlayer/./src/players/DailyMotion.js"],"names":["MATCH_URL","DailyMotion","callPlayer","duration","getDuration","props","onDuration","container","Component","this","didMount","url","controls","config","onError","playing","id","match","player","load","start","parseStartTime","autoplay","getSDK","DM","then","Player","width","height","video","params","mute","muted","origin","window","location","dailymotion","events","apiready","onReady","seeked","onSeek","currentTime","video_end","onEnded","durationchange","onDurationChange","pause","onPause","onPlay","waiting","onBuffer","error","event","seconds","fraction","bufferedTime","style","display","ref","test"],"mappings":"gvDAIA,IAGMA,EAAY,wHAEGC,E,6VAKNC,K,0BA6CM,WACjB,IAAMC,EAAW,EAAKC,cACtB,EAAKC,MAAMC,WAAWH,K,cAuBjB,WACL,EAAKD,WAAW,YAAY,K,gBAGrB,WACP,EAAKA,WAAW,YAAY,K,aAexB,SAAAK,GACJ,EAAKA,UAAYA,I,8OAhGoBC,gB,4FAQrCC,KAAKJ,MAAMK,UAAYD,KAAKJ,MAAMK,SAASD,Q,2BAGvCE,GAAK,aACsCF,KAAKJ,MAA5CO,EADC,EACDA,SAAUC,EADT,EACSA,OAAQC,EADjB,EACiBA,QAASC,EAD1B,EAC0BA,QAC1BC,EAFA,EAEML,EAAIM,MAAMjB,GAFhB,MAGLS,KAAKS,OACPT,KAAKS,OAAOC,KAAKH,EAAI,CACnBI,MAAOC,YAAeV,GACtBW,SAAUP,IAIdQ,YA1BY,+BACG,KACM,cAwByB,SAAAC,GAAE,OAAIA,EAAGN,SAAQO,KAAK,SAAAD,GAClE,GAAK,EAAKjB,UAAV,CACA,IAAMmB,EAASF,EAAGN,OAClB,EAAKA,OAAS,IAAIQ,EAAO,EAAKnB,UAAW,CACvCoB,MAAO,OACPC,OAAQ,OACRC,MAAOb,EACPc,O,2UAAQ,CAAF,CACJlB,SAAUA,EACVU,SAAU,EAAKjB,MAAMU,QACrBgB,KAAM,EAAK1B,MAAM2B,MACjBZ,MAAOC,YAAeV,GACtBsB,OAAQC,OAAOC,SAASF,QACrBpB,EAAOuB,YAAYN,QAExBO,OAAQ,CACNC,SAAU,EAAKjC,MAAMkC,QACrBC,OAAQ,kBAAM,EAAKnC,MAAMoC,OAAO,EAAKvB,OAAOwB,cAC5CC,UAAW,EAAKtC,MAAMuC,QACtBC,eAAgB,EAAKC,iBACrBC,MAAO,EAAK1C,MAAM2C,QAClBjC,QAAS,EAAKV,MAAM4C,OACpBC,QAAS,EAAK7C,MAAM8C,SACpBC,MAAO,SAAAC,GAAK,OAAIvC,EAAQuC,SAG3BvC,K,6BASHL,KAAKP,WAAW,U,8BAIhBO,KAAKP,WAAW,W,6DAOVoD,GACN7C,KAAKP,WAAW,OAAQoD,K,gCAGfC,GACT9C,KAAKP,WAAW,YAAaqD,K,oCAY7B,OAAO9C,KAAKS,OAAOf,UAAY,O,uCAI/B,OAAOM,KAAKS,OAAOwB,c,yCAInB,OAAOjC,KAAKS,OAAOsC,e,+BAOX,IAEFC,EAAQ,CACZ9B,MAAO,OACPC,OAAQ,OACR8B,QAJkBjD,KAAKJ,MAAjBqD,SAMR,OACE,yBAAKD,MAAOA,GACV,yBAAKE,IAAKlD,KAAKkD,W,OA5GF1D,E,cACE,e,EADFA,E,UAEF,SAAAU,GAAG,OAAIX,EAAU4D,KAAKjD,K,EAFpBV,E,eAGE","file":"3.ReactPlayer.standalone.js","sourcesContent":["import React, { Component } from 'react'\n\nimport { callPlayer, getSDK, parseStartTime } from '../utils'\n\nconst SDK_URL = 'https://api.dmcdn.net/all.js'\nconst SDK_GLOBAL = 'DM'\nconst SDK_GLOBAL_READY = 'dmAsyncInit'\nconst MATCH_URL = /^(?:(?:https?):)?(?:\\/\\/)?(?:www\\.)?(?:(?:dailymotion\\.com(?:\\/embed)?\\/video)|dai\\.ly)\\/([a-zA-Z0-9]+)(?:_[\\w_-]+)?$/\n\nexport default class DailyMotion extends Component {\n  static displayName = 'DailyMotion'\n  static canPlay = url => MATCH_URL.test(url)\n  static loopOnEnded = true\n\n  callPlayer = callPlayer\n\n  componentDidMount () {\n    this.props.didMount && this.props.didMount(this)\n  }\n\n  load (url) {\n    const { controls, config, onError, playing } = this.props\n    const [, id] = url.match(MATCH_URL)\n    if (this.player) {\n      this.player.load(id, {\n        start: parseStartTime(url),\n        autoplay: playing\n      })\n      return\n    }\n    getSDK(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY, DM => DM.player).then(DM => {\n      if (!this.container) return\n      const Player = DM.player\n      this.player = new Player(this.container, {\n        width: '100%',\n        height: '100%',\n        video: id,\n        params: {\n          controls: controls,\n          autoplay: this.props.playing,\n          mute: this.props.muted,\n          start: parseStartTime(url),\n          origin: window.location.origin,\n          ...config.dailymotion.params\n        },\n        events: {\n          apiready: this.props.onReady,\n          seeked: () => this.props.onSeek(this.player.currentTime),\n          video_end: this.props.onEnded,\n          durationchange: this.onDurationChange,\n          pause: this.props.onPause,\n          playing: this.props.onPlay,\n          waiting: this.props.onBuffer,\n          error: event => onError(event)\n        }\n      })\n    }, onError)\n  }\n\n  onDurationChange = () => {\n    const duration = this.getDuration()\n    this.props.onDuration(duration)\n  }\n\n  play () {\n    this.callPlayer('play')\n  }\n\n  pause () {\n    this.callPlayer('pause')\n  }\n\n  stop () {\n    // Nothing to do\n  }\n\n  seekTo (seconds) {\n    this.callPlayer('seek', seconds)\n  }\n\n  setVolume (fraction) {\n    this.callPlayer('setVolume', fraction)\n  }\n\n  mute = () => {\n    this.callPlayer('setMuted', true)\n  }\n\n  unmute = () => {\n    this.callPlayer('setMuted', false)\n  }\n\n  getDuration () {\n    return this.player.duration || null\n  }\n\n  getCurrentTime () {\n    return this.player.currentTime\n  }\n\n  getSecondsLoaded () {\n    return this.player.bufferedTime\n  }\n\n  ref = container => {\n    this.container = container\n  }\n\n  render () {\n    const { display } = this.props\n    const style = {\n      width: '100%',\n      height: '100%',\n      display\n    }\n    return (\n      <div style={style}>\n        <div ref={this.ref} />\n      </div>\n    )\n  }\n}\n"],"sourceRoot":""}
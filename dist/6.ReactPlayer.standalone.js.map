{"version":3,"sources":["webpack://renderReactPlayer/./src/players/SoundCloud.js"],"names":["MATCH_URL","SoundCloud","callPlayer","setVolume","props","volume","iframe","Component","this","didMount","url","isReady","getSDK","then","SC","Widget","Events","PLAY","PLAY_PROGRESS","PAUSE","FINISH","ERROR","player","bind","onPlay","onPause","e","currentTime","currentPosition","fractionLoaded","loadedProgress","onEnded","onError","load","config","soundcloud","options","callback","getDuration","duration","onReady","seconds","fraction","style","width","height","display","ref","src","encodeURIComponent","frameBorder","allow","test"],"mappings":"0vCAIA,IAEMA,EAAY,iCAEGC,E,6VAKNC,K,kBACF,M,qBACG,M,wBACG,M,cAqDV,WACL,EAAKC,UAAU,K,gBAGR,WACmB,OAAtB,EAAKC,MAAMC,QACb,EAAKF,UAAU,EAAKC,MAAMC,U,aAgBxB,SAAAC,GACJ,EAAKA,OAASA,I,8OApFsBC,gB,4FAWpCC,KAAKJ,MAAMK,UAAYD,KAAKJ,MAAMK,SAASD,Q,2BAGvCE,EAAKC,GAAS,WAClBC,YAnBY,yCACG,MAkBaC,KAAK,SAAAC,GAC/B,GAAK,EAAKR,OAAV,CADqC,MAEiBQ,EAAGC,OAAOC,OAAxDC,EAF6B,EAE7BA,KAAMC,EAFuB,EAEvBA,cAAeC,EAFQ,EAERA,MAAOC,EAFC,EAEDA,OAAQC,EAFP,EAEOA,MACvCV,IACH,EAAKW,OAASR,EAAGC,OAAO,EAAKT,QAC7B,EAAKgB,OAAOC,KAAKN,EAAM,EAAKb,MAAMoB,QAClC,EAAKF,OAAOC,KAAKJ,EAAO,EAAKf,MAAMqB,SACnC,EAAKH,OAAOC,KAAKL,EAAe,SAAAQ,GAC9B,EAAKC,YAAcD,EAAEE,gBAAkB,IACvC,EAAKC,eAAiBH,EAAEI,iBAE1B,EAAKR,OAAOC,KAAKH,EAAQ,kBAAM,EAAKhB,MAAM2B,YAC1C,EAAKT,OAAOC,KAAKF,EAAO,SAAAK,GAAC,OAAI,EAAKtB,MAAM4B,QAAQN,MAElD,EAAKJ,OAAOW,KAAKvB,E,2UAAjB,IACK,EAAKN,MAAM8B,OAAOC,WAAWC,QADlC,CAEEC,SAAU,WACR,EAAKf,OAAOgB,YAAY,SAAAC,GACtB,EAAKA,SAAWA,EAAW,IAC3B,EAAKnC,MAAMoC,qB,6BAQnBhC,KAAKN,WAAW,U,8BAIhBM,KAAKN,WAAW,W,6DAOVuC,GACNjC,KAAKN,WAAW,SAAoB,IAAVuC,K,gCAGjBC,GACTlC,KAAKN,WAAW,YAAwB,IAAXwC,K,oCAc7B,OAAOlC,KAAK+B,W,uCAIZ,OAAO/B,KAAKmB,c,yCAIZ,OAAOnB,KAAKqB,eAAiBrB,KAAK+B,W,+BAO1B,IAEFI,EAAQ,CACZC,MAAO,OACPC,OAAQ,OACRC,QAJkBtC,KAAKJ,MAAjB0C,SAMR,OACE,4BACEC,IAAKvC,KAAKuC,IACVC,IAAG,+CAA0CC,mBAAmBzC,KAAKJ,MAAMM,MAC3EiC,MAAOA,EACPO,YAAa,EACbC,MAAM,iB,OApGOlD,E,cACE,c,EADFA,E,UAEF,SAAAS,GAAG,OAAIV,EAAUoD,KAAK1C,K,EAFpBT,E,eAGE","file":"6.ReactPlayer.standalone.js","sourcesContent":["import React, { Component } from 'react'\n\nimport { callPlayer, getSDK } from '../utils'\n\nconst SDK_URL = 'https://w.soundcloud.com/player/api.js'\nconst SDK_GLOBAL = 'SC'\nconst MATCH_URL = /(soundcloud\\.com|snd\\.sc)\\/.+$/\n\nexport default class SoundCloud extends Component {\n  static displayName = 'SoundCloud'\n  static canPlay = url => MATCH_URL.test(url)\n  static loopOnEnded = true\n\n  callPlayer = callPlayer\n  duration = null\n  currentTime = null\n  fractionLoaded = null\n\n  componentDidMount () {\n    this.props.didMount && this.props.didMount(this)\n  }\n\n  load (url, isReady) {\n    getSDK(SDK_URL, SDK_GLOBAL).then(SC => {\n      if (!this.iframe) return\n      const { PLAY, PLAY_PROGRESS, PAUSE, FINISH, ERROR } = SC.Widget.Events\n      if (!isReady) {\n        this.player = SC.Widget(this.iframe)\n        this.player.bind(PLAY, this.props.onPlay)\n        this.player.bind(PAUSE, this.props.onPause)\n        this.player.bind(PLAY_PROGRESS, e => {\n          this.currentTime = e.currentPosition / 1000\n          this.fractionLoaded = e.loadedProgress\n        })\n        this.player.bind(FINISH, () => this.props.onEnded())\n        this.player.bind(ERROR, e => this.props.onError(e))\n      }\n      this.player.load(url, {\n        ...this.props.config.soundcloud.options,\n        callback: () => {\n          this.player.getDuration(duration => {\n            this.duration = duration / 1000\n            this.props.onReady()\n          })\n        }\n      })\n    })\n  }\n\n  play () {\n    this.callPlayer('play')\n  }\n\n  pause () {\n    this.callPlayer('pause')\n  }\n\n  stop () {\n    // Nothing to do\n  }\n\n  seekTo (seconds) {\n    this.callPlayer('seekTo', seconds * 1000)\n  }\n\n  setVolume (fraction) {\n    this.callPlayer('setVolume', fraction * 100)\n  }\n\n  mute = () => {\n    this.setVolume(0)\n  }\n\n  unmute = () => {\n    if (this.props.volume !== null) {\n      this.setVolume(this.props.volume)\n    }\n  }\n\n  getDuration () {\n    return this.duration\n  }\n\n  getCurrentTime () {\n    return this.currentTime\n  }\n\n  getSecondsLoaded () {\n    return this.fractionLoaded * this.duration\n  }\n\n  ref = iframe => {\n    this.iframe = iframe\n  }\n\n  render () {\n    const { display } = this.props\n    const style = {\n      width: '100%',\n      height: '100%',\n      display\n    }\n    return (\n      <iframe\n        ref={this.ref}\n        src={`https://w.soundcloud.com/player/?url=${encodeURIComponent(this.props.url)}`}\n        style={style}\n        frameBorder={0}\n        allow='autoplay'\n      />\n    )\n  }\n}\n"],"sourceRoot":""}